import System.Environment
import Data.List
import Data.Maybe
import Char

-- Utils

fibonacci a b = let c = a + b in (c : fibonacci b c)

factorial n = product [2..n]


-- A primes sieve from haskell.org:

primesTo m = 2 : eratos [3,5..m]  where
    eratos []     = []
    eratos (p:xs) = p : eratos (xs `minus` [p*p,p*p+2*p..m])

minus (x:xs) (y:ys) = case (compare x y) of
    LT -> x : minus xs (y:ys)
    EQ -> minus xs ys
    GT -> minus (x:xs) ys
minus xs _ = xs

primeFactors :: Int -> [Int]
primeFactors n = factor n $ primesTo n
  where
    factor n (p:ps) 
        | p*p > n        = [n]
        | n `mod` p == 0 = p : factor (n `div` p) (p:ps)
        | otherwise      = factor n ps

{-factorize num = factorize' num (primesTo num) where
    factorize' 1 _ result = result
    factorize' n (p:ps) buf = case n `divMod` p of
        (q, 0) -> factorize' q (p:ps) (p:buf)
        _ -> factorize' n ps buf
-}

countDivisors num = 
    let cd' 1 _ result buf = result * buf
        cd' n (p:ps) result coeff = case n `divMod` p of
            (q, 0) -> cd' q (p:ps) result (coeff+1)
            _ -> cd' n ps (result * coeff) 1
    in cd' num (primesTo num) 1 1

-- Problems

euler :: Int -> Int

euler 1 = let divisors = [3,5]
              limit    = 1000
              isGood n = any (==0) $ map (mod n) divisors
              goodNums = filter isGood [1..limit-1]
          in sum goodNums

euler 2 = 
    let limit = 4000000
        nums = takeWhile (<=limit) (fibonacci 0 1) 
    in sum $ filter even nums

euler 3 = foldr1 max $ primeFactors 600851475143

euler 4 =
    let palindromes = map mkPalind [999,998..100]
            where mkPalind n = read $ s ++ (reverse s) where s = show n

        -- We can use the fact that any palindrome of 2*n digits is a multiple of 11
        divisors = [990, 979..100]
        isGoodDiv n d = let (q, r) = (n `divMod` d) 
                        in (r==0 && q < 1000 && q > 100)
        isSolution n = isJust $ find (isGoodDiv n) divisors
        Just solution = find isSolution palindromes
    in solution

euler 5 = foldr1 lcm [1..20]

euler 6 = 
    let nums = [1..100]
        sumSq = sum . map (^2)
        sqSum = (^2) . sum
    in (sqSum nums) - (sumSq nums)

euler 7 = head $ drop 10000 $ primesTo 100000000000
    
euler 8 = 
    let sublists len arr =
            if length arr < len
                then []
                else (take len arr : (sublists len $ tail arr))
        bignum = concat [
            "73167176531330624919225119674426574742355349194934",
            "96983520312774506326239578318016984801869478851843",
            "85861560789112949495459501737958331952853208805511",
            "12540698747158523863050715693290963295227443043557",
            "66896648950445244523161731856403098711121722383113",
            "62229893423380308135336276614282806444486645238749",
            "30358907296290491560440772390713810515859307960866",
            "70172427121883998797908792274921901699720888093776",
            "65727333001053367881220235421809751254540594752243",
            "52584907711670556013604839586446706324415722155397",
            "53697817977846174064955149290862569321978468622482",
            "83972241375657056057490261407972968652414535100474",
            "82166370484403199890008895243450658541227588666881",
            "16427171479924442928230863465674813919123162824586",
            "17866458359124566529476545682848912883142607690042",
            "24219022671055626321111109370544217506941658960408",
            "07198403850962455444362981230987879927244284909188",
            "84580156166097919133875499200524063689912560717606",
            "05886116467109405077541002256983155200055935729725",
            "71636269561882670428252483600823257530420752963450"]
        digits = map digitToInt bignum
    in
        foldr1 max [product arr | arr <- sublists 5 digits]


euler 9 = 
    let param = 1000
        isSolution (x, y) = x^2 + y^2 == (param - x - y)^2
        (a, b) = head $ filter isSolution [(x, y) | x <- [1..1000], y <- [1..1000-x]]
    in a * b * (param - a - b)

euler 10 = sum $ primesTo 2000000

euler 12 =
    let triangles = scanl1 (+) [1..]
        countDivisors n = product $ map ((+1).length) $ group $ primeFactors n
        isSolution n = countDivisors n > 500
    in head $ filter isSolution triangles

euler 13 
    = let nums = [37107287533902102798797998220837590246510135740250,
                  46376937677490009712648124896970078050417018260538,
                  74324986199524741059474233309513058123726617309629,
                  91942213363574161572522430563301811072406154908250,
                  23067588207539346171171980310421047513778063246676,
                  89261670696623633820136378418383684178734361726757,
                  28112879812849979408065481931592621691275889832738,
                  44274228917432520321923589422876796487670272189318,
                  47451445736001306439091167216856844588711603153276,
                  70386486105843025439939619828917593665686757934951,
                  62176457141856560629502157223196586755079324193331,
                  64906352462741904929101432445813822663347944758178,
                  92575867718337217661963751590579239728245598838407,
                  58203565325359399008402633568948830189458628227828,
                  80181199384826282014278194139940567587151170094390,
                  35398664372827112653829987240784473053190104293586,
                  86515506006295864861532075273371959191420517255829,
                  71693888707715466499115593487603532921714970056938,
                  54370070576826684624621495650076471787294438377604,
                  53282654108756828443191190634694037855217779295145,
                  36123272525000296071075082563815656710885258350721,
                  45876576172410976447339110607218265236877223636045,
                  17423706905851860660448207621209813287860733969412,
                  81142660418086830619328460811191061556940512689692,
                  51934325451728388641918047049293215058642563049483,
                  62467221648435076201727918039944693004732956340691,
                  15732444386908125794514089057706229429197107928209,
                  55037687525678773091862540744969844508330393682126,
                  18336384825330154686196124348767681297534375946515,
                  80386287592878490201521685554828717201219257766954,
                  78182833757993103614740356856449095527097864797581,
                  16726320100436897842553539920931837441497806860984,
                  48403098129077791799088218795327364475675590848030,
                  87086987551392711854517078544161852424320693150332,
                  59959406895756536782107074926966537676326235447210,
                  69793950679652694742597709739166693763042633987085,
                  41052684708299085211399427365734116182760315001271,
                  65378607361501080857009149939512557028198746004375,
                  35829035317434717326932123578154982629742552737307,
                  94953759765105305946966067683156574377167401875275,
                  88902802571733229619176668713819931811048770190271,
                  25267680276078003013678680992525463401061632866526,
                  36270218540497705585629946580636237993140746255962,
                  24074486908231174977792365466257246923322810917141,
                  91430288197103288597806669760892938638285025333403,
                  34413065578016127815921815005561868836468420090470,
                  23053081172816430487623791969842487255036638784583,
                  11487696932154902810424020138335124462181441773470,
                  63783299490636259666498587618221225225512486764533,
                  67720186971698544312419572409913959008952310058822,
                  95548255300263520781532296796249481641953868218774,
                  76085327132285723110424803456124867697064507995236,
                  37774242535411291684276865538926205024910326572967,
                  23701913275725675285653248258265463092207058596522,
                  29798860272258331913126375147341994889534765745501,
                  18495701454879288984856827726077713721403798879715,
                  38298203783031473527721580348144513491373226651381,
                  34829543829199918180278916522431027392251122869539,
                  40957953066405232632538044100059654939159879593635,
                  29746152185502371307642255121183693803580388584903,
                  41698116222072977186158236678424689157993532961922,
                  62467957194401269043877107275048102390895523597457,
                  23189706772547915061505504953922979530901129967519,
                  86188088225875314529584099251203829009407770775672,
                  11306739708304724483816533873502340845647058077308,
                  82959174767140363198008187129011875491310547126581,
                  97623331044818386269515456334926366572897563400500,
                  42846280183517070527831839425882145521227251250327,
                  55121603546981200581762165212827652751691296897789,
                  32238195734329339946437501907836945765883352399886,
                  75506164965184775180738168837861091527357929701337,
                  62177842752192623401942399639168044983993173312731,
                  32924185707147349566916674687634660915035914677504,
                  99518671430235219628894890102423325116913619626622,
                  73267460800591547471830798392868535206946944540724,
                  76841822524674417161514036427982273348055556214818,
                  97142617910342598647204516893989422179826088076852,
                  87783646182799346313767754307809363333018982642090,
                  10848802521674670883215120185883543223812876952786,
                  71329612474782464538636993009049310363619763878039,
                  62184073572399794223406235393808339651327408011116,
                  66627891981488087797941876876144230030984490851411,
                  60661826293682836764744779239180335110989069790714,
                  85786944089552990653640447425576083659976645795096,
                  66024396409905389607120198219976047599490197230297,
                  64913982680032973156037120041377903785566085089252,
                  16730939319872750275468906903707539413042652315011,
                  94809377245048795150954100921645863754710598436791,
                  78639167021187492431995700641917969777599028300699,
                  15368713711936614952811305876380278410754449733078,
                  40789923115535562561142322423255033685442488917353,
                  44889911501440648020369068063960672322193204149535,
                  41503128880339536053299340368006977710650566631954,
                  81234880673210146739058568557934581403627822703280,
                  82616570773948327592232845941706525094512325230608,
                  22918802058777319719839450180888072429661980811197,
                  77158542502016545090413245809786882778948721859617,
                  72107838435069186155435662884062257473692284509516,
                  20849603980134001723930671666823555245252804609722,
                  53503534226472524250874054075591789781264330331690]
          s = sum nums
          digitsStr = take 10 $ show s
    in read digitsStr          


euler 16 = sum $ map digitToInt $ show $ 2^1000

euler 20 = sum $ map digitToInt $ show $ factorial 100


-- main

main = do
    problem_id <- getArgs 
    putStrLn $ show $ euler $ read $ head problem_id
